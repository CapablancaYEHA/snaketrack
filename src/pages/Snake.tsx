import { useLocation } from "preact-iso";
import { useState } from "preact/hooks";
import fallback from "@assets/placeholder.png";
import { Box, Flex, Image, LoadingOverlay, Paper, SegmentedControl, Select, Stack, Text, Title } from "@mantine/core";
import { ChartLine } from "@/components/common/Chart/ChartLine";
import { SexName } from "@/components/common/sexName";
import { sortBpGenes } from "@/components/genetics/const";
import { GenePill } from "@/components/genetics/geneSelect";
import { useSnake } from "@/api/hooks";
import { getAge, getDate } from "@/utils/time";

// let mock = {
//   w: [
//     { date: "2025-02-22 00:00:00.000+0300", weight: 90 },
//     { date: "2025-03-25 00:00:00.000+0300", weight: 98 },
//     { date: "2025-03-27 00:00:00.000+0300", weight: 100 },
//     { date: "2025-03-28 00:00:00.000+0300", weight: 98 },
//   ],
//   f: [
//     { feed_last_at: "2025-03-22 00:00:00.000+0300 ", feed_weight: 22 },
//     { feed_last_at: "2025-03-24 00:00:00.000+0300 ", feed_weight: 28 },
//     { feed_last_at: "2025-03-26 00:00:00.000+0300 ", feed_weight: 30 },
//   ],
// };

export function Snake() {
  const location = useLocation();
  const [value, setValue] = useState("common");
  const [scale, setScale] = useState("weeks");
  const [view, setView] = useState<"ko" | "snake" | "both">("both");
  const { data, isPending, isError } = useSnake(location.query.id);

  if (isPending) return <LoadingOverlay visible zIndex={30} overlayProps={{ radius: "sm", blur: 2, backgroundOpacity: 0.5 }} />;

  if (isError)
    return (
      <Text fw={500} c="var(--mantine-color-error)">
        –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
      </Text>
    );

  return (
    <Stack align="flex-start" justify="flex-start" gap="lg" component="section">
      <Title component="span" order={4} c="yellow.6">
        –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–º–µ–µ
      </Title>
      <Box m="0 auto">
        <SegmentedControl
          value={value}
          onChange={setValue}
          data={[
            { label: "–û–±—â–µ–µ", value: "common" },
            { label: "–°–µ–º–µ–π–Ω–æ–µ –¥—Ä–µ–≤–æ", value: "tree", disabled: true },
          ]}
        />
      </Box>

      <Flex align="flex-start" justify="space-between" columnGap="md" w="100%">
        <Stack>
          <Flex align="flex-start" justify="flex-start" gap="xs">
            <Text>üëë–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –ø–∏—Ç–æ–Ω</Text>
            <SexName sex={data.sex} name={data.snake_name} />
          </Flex>
          <Image src={data.picture} flex="0 0 0px" fit="cover" radius="md" mih={110} w="auto" maw="100%" h={200} fallbackSrc={fallback} loading="lazy" />
        </Stack>

        <Stack>
          <Text size="md">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî {getDate(data.date_hatch)}</Text>
          <Text size="md">‚åõ {getAge(data.date_hatch)}</Text>
        </Stack>
      </Flex>
      <Flex gap="sm" style={{ flexFlow: "row wrap" }}>
        {sortBpGenes(data.genes as any).map((a) => (
          <GenePill item={a} key={`${a.label}_${a.id}`} />
        ))}
      </Flex>
      <Paper shadow="sm" radius="lg" p="xl" w="100%">
        <Text size="xs" c="dark.3">
          –í–∞—à–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        </Text>
        <Text size="sm">{data.notes ?? "–ü—É—Å—Ç–æ"}</Text>
      </Paper>

      <Flex justify="space-between" w="100%">
        <Select
          label="–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
          data={[
            { label: "–ì–æ–¥", value: "years" },
            { label: "–°–µ–∑–æ–Ω", value: "seasons" },
            { label: "–ö–≤–∞—Ä—Ç–∞–ª", value: "quarters" },
            { label: "–ú–µ—Å—è—Ü", value: "months" },
            { label: "–ù–µ–¥–µ–ª—è", value: "weeks" },
            { label: "–î–µ–Ω—å", value: "days" },
          ]}
          value={scale}
          onChange={setScale as any}
        />
        <Select
          label="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è"
          data={[
            { label: "–ö–û", value: "ko" },
            { label: "–ñ–∏–≤–æ—Ç–Ω–æ–≥–æ", value: "snake" },
            { label: "–û–±–æ–∏—Ö", value: "both" },
          ]}
          value={view}
          onChange={setView as any}
        />
      </Flex>
      <ChartLine weightData={data?.weight} feedData={data?.feeding} scaleX={scale} view={view} />
    </Stack>
  );
}

// FIXME delete
// const mock_snake = {
//   pre_id: 93,
//   id: "11111",
//   snake_name: "test2",
//   date_hatch: "2025-03-05T00:00:00+03:00",
//   sex: "female",
//   genes: [
//     {
//       id: 201,
//       gene: "rec",
//       alias: null,
//       label: "66% Het Ultramel",
//       hasHet: true,
//       hasSuper: false,
//     },
//     {
//       id: 208,
//       gene: "rec",
//       alias: null,
//       label: "50% Het Ultramel",
//       hasHet: true,
//       hasSuper: false,
//     },

//     {
//       id: 189,
//       gene: "inc-dom",
//       alias: null,
//       label: "Spider",
//       hasHet: false,
//       hasSuper: false,
//     },
//     {
//       id: 112,
//       gene: "dom",
//       alias: null,
//       label: "Leopard",
//       hasHet: false,
//       hasSuper: true,
//     },
//     {
//       id: 4,
//       gene: "rec",
//       alias: null,
//       label: "Zed",
//       hasHet: true,
//       hasSuper: false,
//     },
//     {
//       id: 6,
//       gene: "rec",
//       alias: null,
//       label: "Het Albino",
//       hasHet: true,
//       hasSuper: false,
//     },
//   ],
//   origin: "purchase",
//   parents: null,
//   price: null,
//   picture: "https://ezryvcyxbrgcivccpydc.supabase.co/storage/v1/object/public/snakepics/9d87ef40-d470-41a2-a25c-61e73a487dbc/OVh99FbH",
//   owner_id: "9d87ef40-d470-41a2-a25c-61e73a487dbc",
//   owner_name: "Capablanca",
//   status: null,
//   last_action: "update",
//   notes:
//     "–ö—É–ø–∏–ª–∞ –¥–µ—Ç–µ–Ω—ã—à–∞ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ –ø–∏—Ç–æ–Ω–∞,—á–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–Ω–µ–π –º–æ–∏ –∑–Ω–∞–∫–æ–º—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–æ–±—â–µ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è –≤ –∑–º–µ—è—Ö,–∑–∞–º–µ—Ç–∏–ª–∏,—á—Ç–æ –æ–Ω–∞ —Ç—Ä—è—Å–µ—Ç –≥–æ–ª–æ–≤–æ–π..—è –ø–æ–¥—É–º–∞–ª–∞ –Ω—É —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –∫–∞–∫–∞—è —Ç–æ.–°–ø—É—Å—Ç—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–Ω–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–µ–º —Ç–∞–∫ –∫—Ä—É–∂–∏—Ç—å—Å—è..–∫—Ä—É—Ç–∏—Ç—å –≥–æ–ª–æ–≤–æ–π..–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—É–º–∞–ª–∞,—á—Ç–æ –ø–µ—Ä–µ–≥—Ä–µ–≤,–Ω–æ –Ω–µ—Ç. –æ–Ω–∞ –∏ –µ–µ –±—Ä–∞—Ç —Å—Ç–æ—è—Ç –Ω–∞ –æ–¥–Ω–æ–º –∫–æ–≤—Ä–∏–∫–µ,—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —è –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∞.–¥–∞ –∏ —Å–∞–º–∞ –æ–Ω–∞ –±—ã–ª–∞ –Ω–µ –≥–æ—Ä—è—á–∞—è –∏ –¥–∞–∂–µ –Ω–µ —Ç–µ–ø–ª–∞—è. –ñ–∏–≤–µ—Ç –≤ –±–æ–∫—Å–µ,–≤–æ–¥–∞ —Å–≤–µ–∂–∞—è —Å—Ç–æ–∏—Ç, –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è —Ö–æ—Ä–æ—à–∞—è. –µ–π –æ—Ç —Å–∏–ª—ã –º–µ—Å—è—Ü,–µ—â–µ –Ω–µ —Ä–∞–∑—É –Ω–µ –∫—É—à–∞–ª–∞,–Ω–æ —É–∂–µ –ø—Ä–æ–ª–∏–Ω—è–ª–∞—Å—å –≤—Ä–æ–¥–µ –±—ã —É –∑–∞–≤–æ–¥—á–∏–∫–∞.–ú–æ—Ä—Ñ–∞ Bumblebee. –ï—Å—Ç—å –≤–∏–¥–µ–æ,–≥–¥–µ –≤–∏–¥–Ω–æ,–∫–∞–∫ –æ–Ω–∞ –∫—Ä—É—Ç–∏—Ç—Å—è.",
//   weight: null,
//   feeding: [
//     {
//       feed_ko: null,
//       feed_weight: null,
//       feed_comment: null,
//       feed_last_at: null,
//     },
//   ],
// };
